{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"欢迎大家!!","date":"2019-05-24T09:29:49.538Z","updated":"2019-05-24T09:29:49.538Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"真正的才智是刚毅的志向。 —— 拿破仑感情有着极大的鼓舞力量，因此，它是一切道德行为的重要前提，谁要是没有强烈的志向，也就不能够热烈地把这个志向体现于事业中。 —— 凯洛夫勇敢坚毅真正之才智乃刚毅之志向。 —— 拿破仑生活赋予我们一种巨大的和无限高贵的礼品，这就是青春：充满着力量，充满着期待志愿，充满着求知和斗争的志向，充满着希望信心和青春。 —— 奥斯特洛夫斯基志向不过是记忆的奴隶，生气勃勃地降生，但却很难成长。 —— 莎士比亚"}],"posts":[{"title":"Image","slug":"images","date":"2019-05-24T08:47:12.411Z","updated":"2019-05-24T09:10:40.928Z","comments":true,"path":"2019/05/24/images/","link":"","permalink":"http://yoursite.com/2019/05/24/images/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"JDBC学习","slug":"笔记（一） - 副本","date":"2019-05-24T05:46:16.000Z","updated":"2019-05-24T09:20:09.849Z","comments":true,"path":"2019/05/24/笔记（一） - 副本/","link":"","permalink":"http://yoursite.com/2019/05/24/笔记（一） - 副本/","excerpt":"","text":"事务&amp;数据库连接池&amp;DBUtils事务 Transaction 其实指的一组操作，里面包含许多个单一的逻辑。只要有一个逻辑没有执行成功，那么都算失败。 所有的数据都回归到最初的状态(回滚) 为什么要有事务? 为了确保逻辑的成功。 例子： 银行的转账。 使用命令行方式演示事务。 开启事务 start transaction; 提交或者回滚事务 commit; 提交事务， 数据将会写到磁盘上的数据库rollback ; 数据回滚，回到最初的状态。 使用代码方式演示事务 代码里面的事务，主要是针对连接来的。 通过conn.setAutoCommit（false ）来关闭自动提交的设置。 提交事务 conn.commit(); 回滚事务 conn.rollback(); 12345678910111213141516171819@Testpublic void testTransaction()&#123; Connection conn = null; PreparedStatement ps = null; ResultSet rs = null; try &#123; conn = JDBCUtil.getConn(); //连接，事务默认就是自动提交的。 关闭自动提交。 conn.setAutoCommit(false); String sql = &quot;update account set money = money - ? where id = ?&quot;; ps = conn.prepareStatement(sql); //扣钱， 扣ID为1 的100块钱 ps.setInt(1, 100); ps.setInt(2, 1); ps.executeUpdate(); ​ 总结事务123使用命令行演示使用代码演示 脏读、 不可重复读、 幻读丢失更新 12345678悲观锁乐观锁4个隔离级别 读未提交 读已提交 可重复读 可串行化 数据连接池 DBCP 不使用配置 使用配置 C3P0 不使用配置 使用配置 （必须掌握） 自定义连接池 装饰者模式 DBUtils 简化了我们的CRUD ， 里面定义了通用的CRUD方法。 12queryRunner.update();queryRunner.query","categories":[],"tags":[]},{"title":"Hexo学习（一）","slug":"笔记（一）","date":"2019-05-24T05:46:16.000Z","updated":"2019-05-24T09:19:19.405Z","comments":true,"path":"2019/05/24/笔记（一）/","link":"","permalink":"http://yoursite.com/2019/05/24/笔记（一）/","excerpt":"","text":"Hexo学习（一）此文介绍Hexo建站的流程…特别鸣谢 指导人 CodeSheep 从此打开新的大门let‘s go 01.安装 Node.j打开官方网站 https://nodejs.org 02.安装 Git打开官方网站 https://git-scm.com/downloads 然后我们选择windows版本的下载 安装也是一直点下一步，安装官方默认的来就行，完了，在开始菜单可以看到 tips：这个Git Bash下载下来就相当于Linux中的终端窗口了，以后我们就用这个东东来打开终端。 03.安装hexo新建一个文件夹，比如我这里建了 ==blog4==打开你的文件夹，然后在空白处点鼠标的右键，选择 ==Git Bash Here==看看 ==node，npm== 是否安装成功，没有成功的就重新安装node。 我们需要先来安装个cnpm提高速度，以后下载什么东西都用cnpm在上面终端继续输入npm install -g cnpm --registry=https://registry.npm.taobao.org测试cnpm-成功！ ==完成之后安装hexo==cnpm install -g hexo-cli 验证是否安装成功hexo -v出现,说明成功 1234567891011121314151617hexo: 3.8.0hexo-cli: 1.1.0os: Windows_NT 10.0.17134 win32 x64http_parser: 2.8.0node: 10.15.3v8: 6.8.275.32-node.51uv: 1.23.2zlib: 1.2.11ares: 1.15.0modules: 64nghttp2: 1.34.0napi: 3openssl: 1.1.0jicu: 62.1unicode: 11.0cldr: 33.1tz: 2018e 首先看看当前路径命令pwd结果为Administrator@XTZ-01804162214 MINGW64 ~/Desktop/blog4然后我们运行命令，这步是关键，主要是建立整个项目，这里我的文件夹名字是kuku，文件夹位置是桌面上。hexo init结果如下： 04.运行测试这里我们经常用到的有三个命令 1234hexo clean #用来清理缓存文件hexo g #生成文件hexo s #运行本地服务器hexo d #上传到服务器 我们运行hexo s 打开浏览器，输入localhost:4000,看到 说明本地环境搭建完成。。。其余的内容请看下一篇文章。","categories":[],"tags":[]}]}